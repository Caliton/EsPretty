import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';
import 'package:sqfentity/sqfentity.dart';
import 'package:espresso_app/config/config-database.dart';

/*
      These classes was generated by SqfEntity
      To use these SqfEntity classes do following: 
      - import Invoice.dart into where to use
      - start typing Invoice().select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
      - and then just put end of filters / or end of only select()  toSingle(invoice) / or toList(invoiceList) 
      - you can select one Invoice or List<Invoice> by your filters and orders
      - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
        Enjoy.. Huseyin Tokpunar
      */
// region Invoice
class Invoice {
  Invoice({this.id, this.description, this.path, this.status}) {
    setDefaultValues();
  }
  Invoice.withFields(this.description, this.path, this.status) {
    setDefaultValues();
  }
  Invoice.withId(this.id, this.description, this.path, this.status) {
    setDefaultValues();
  }
  Invoice.fromMap(Map<String, dynamic> o) {
    id = o["id"] as int;
    description = o["description"] as String;
    path = o["path"] as String;
    status = o["status"] as String;
  }
  // FIELDS
  int id;
  String description;
  String path;
  String status;
  // end FIELDS

  static const bool _softDeleteActivated = false;
  InvoiceManager __mnInvoice;
  InvoiceFilterBuilder _select;

  InvoiceManager get _mnInvoice {
    if (__mnInvoice == null) __mnInvoice = InvoiceManager();
    return __mnInvoice;
  }

  // methods
  Map<String, dynamic> toMap({bool forQuery = false}) {
    final map = Map<String, dynamic>();
    if (id != null) {
      map["id"] = id;
    }
    if (description != null) {
      map["description"] = description;
    }
    if (path != null) {
      map["path"] = path;
    }
    if (status != null) {
      map["status"] = status;
    }

    return map;
  }

  List<dynamic> toArgs() {
    return [id, description, path, status];
  }

  static Future<List<Invoice>> fromWebUrl(String url,
      [VoidCallback invoiceList(List<Invoice> o)]) async {
    var objList = List<Invoice>();
    try {
      final response = await http.get(url);
      final Iterable list = json.decode(response.body) as Iterable;
      objList = list
          .map((invoice) => Invoice.fromMap(invoice as Map<String, dynamic>))
          .toList();
      if (invoiceList != null) {
        invoiceList(objList);
      }
      return objList;
    } catch (e) {
      print("SQFENTITY ERROR Invoice.fromWeb: ErrorMessage:" + e.toString());
      return null;
    }
  }

  static Future<List<Invoice>> fromObjectList(Future<List<dynamic>> o) async {
    final invoicesList = List<Invoice>();
    final data = await o;
    for (int i = 0; i < data.length; i++) {
      invoicesList.add(Invoice.fromMap(data[i] as Map<String, dynamic>));
    }
    return invoicesList;
  }

  static List<Invoice> fromMapList(List<Map<String, dynamic>> query) {
    final List<Invoice> invoices = List<Invoice>();
    for (Map map in query) {
      invoices.add(Invoice.fromMap(map as Map<String, dynamic>));
    }
    return invoices;
  }

  /// returns Invoice by ID if exist, otherwise returns null
  /// <param name="id">Primary Key Value</param>
  /// <returns>returns Invoice if exist, otherwise returns null</returns>
  Future<Invoice> getById(int id) async {
    Invoice invoiceObj;
    final data = await _mnInvoice.getById(id);
    if (data.length != 0) {
      invoiceObj = Invoice.fromMap(data[0] as Map<String, dynamic>);
    } else {
      invoiceObj = null;
    }
    return invoiceObj;
  }

  /// <summary>
  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnInvoice
          .insert(Invoice.withFields(description, path, status));
    } else {
      id = await _upsert();
    }
    return id;
  }

  /// <summary>
  /// saveAs Invoice. Returns a new Primary Key value of Invoice
  /// </summary>
  /// <returns>Returns a new Primary Key value of Invoice</returns>
  Future<int> saveAs() async {
    id = await _mnInvoice.insert(Invoice.withFields(description, path, status));
    return id;
  }

  /// <summary>
  /// saveAll method saves the sent List<Invoice> as a batch in one transaction
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> saveAll(List<Invoice> invoices) async {
    final results = _mnInvoice.saveAll(
        "INSERT OR REPLACE INTO invoice (id, description,path,status)  VALUES (?,?,?,?)",
        invoices);
    return results;
  }

  /// <summary>
  /// Updates if the record exists, otherwise adds a new row
  /// </summary>
  /// <returns>Returns id</returns>
  Future<int> _upsert() async {
    id = await _mnInvoice.rawInsert(
        "INSERT OR REPLACE INTO invoice (id, description,path,status)  VALUES (?,?,?,?)",
        [id, description, path, status]);
    return id;
  }

  /// <summary>
  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// </summary>
  /// <returns> Returns a <List<BoolResult>> </returns>
  Future<List<BoolResult>> upsertAll(List<Invoice> invoices) async {
    final results = await _mnInvoice.rawInsertAll(
        "INSERT OR REPLACE INTO invoice (id, description,path,status)  VALUES (?,?,?,?)",
        invoices);
    return results;
  }

  /// <summary>
  /// Deletes Invoice
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print("SQFENTITIY: delete Invoice invoked (id=$id)");
    if (!_softDeleteActivated || hardDelete) {
      return _mnInvoice.delete(QueryParams(whereString: "id=$id"));
    } else {
      return _mnInvoice
          .updateBatch(QueryParams(whereString: "id=$id"), {"isDeleted": 1});
    }
  }

  //private InvoiceFilterBuilder _Select;
  InvoiceFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    _select = InvoiceFilterBuilder(this);
    _select._getIsDeleted = getIsDeleted == true;
    _select.qparams.selectColumns = columnsToSelect;
    return _select;
  }

  InvoiceFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    final InvoiceFilterBuilder _distinct = InvoiceFilterBuilder(this);
    _distinct._getIsDeleted = getIsDeleted == true;
    _distinct.qparams.selectColumns = columnsToSelect;
    _distinct.qparams.distinct = true;
    return _distinct;
  }

  void setDefaultValues() {}
  //end methods
}
// endregion invoice

// region InvoiceField
class InvoiceField extends SearchCriteria {
  InvoiceField(this.invoiceFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = "";
  InvoiceFilterBuilder invoiceFB;

  InvoiceField get not {
    _waitingNot = " NOT ";
    return this;
  }

  InvoiceFilterBuilder equals(var pValue) {
    param.expression = "=";
    invoiceFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, invoiceFB.parameters, param, SqlSyntax.EQuals,
            invoiceFB._addedBlocks)
        : setCriteria(pValue, invoiceFB.parameters, param, SqlSyntax.NotEQuals,
            invoiceFB._addedBlocks);
    _waitingNot = "";
    invoiceFB._addedBlocks.needEndBlock[invoiceFB._blockIndex] =
        invoiceFB._addedBlocks.retVal;
    return invoiceFB;
  }

  InvoiceFilterBuilder isNull() {
    invoiceFB._addedBlocks = setCriteria(
        0,
        invoiceFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        invoiceFB._addedBlocks);
    _waitingNot = "";
    invoiceFB._addedBlocks.needEndBlock[invoiceFB._blockIndex] =
        invoiceFB._addedBlocks.retVal;
    return invoiceFB;
  }

  InvoiceFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      invoiceFB._addedBlocks = setCriteria(
          "%" + pValue.toString() + "%",
          invoiceFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          invoiceFB._addedBlocks);
      _waitingNot = "";
      invoiceFB._addedBlocks.needEndBlock[invoiceFB._blockIndex] =
          invoiceFB._addedBlocks.retVal;
    }
    return invoiceFB;
  }

  InvoiceFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      invoiceFB._addedBlocks = setCriteria(
          pValue.toString() + "%",
          invoiceFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          invoiceFB._addedBlocks);
      _waitingNot = "";
      invoiceFB._addedBlocks.needEndBlock[invoiceFB._blockIndex] =
          invoiceFB._addedBlocks.retVal;
      invoiceFB._addedBlocks.needEndBlock[invoiceFB._blockIndex] =
          invoiceFB._addedBlocks.retVal;
    }
    return invoiceFB;
  }

  InvoiceFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      invoiceFB._addedBlocks = setCriteria(
          "%" + pValue.toString(),
          invoiceFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          invoiceFB._addedBlocks);
      _waitingNot = "";
      invoiceFB._addedBlocks.needEndBlock[invoiceFB._blockIndex] =
          invoiceFB._addedBlocks.retVal;
    }
    return invoiceFB;
  }

  InvoiceFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      invoiceFB._addedBlocks = setCriteria(
          pFirst,
          invoiceFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
          invoiceFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != "") {
        invoiceFB._addedBlocks = setCriteria(pFirst, invoiceFB.parameters,
            param, SqlSyntax.LessThan, invoiceFB._addedBlocks);
      } else {
        invoiceFB._addedBlocks = setCriteria(pFirst, invoiceFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, invoiceFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != "") {
        invoiceFB._addedBlocks = setCriteria(pLast, invoiceFB.parameters, param,
            SqlSyntax.GreaterThan, invoiceFB._addedBlocks);
      } else {
        invoiceFB._addedBlocks = setCriteria(pLast, invoiceFB.parameters, param,
            SqlSyntax.LessThanOrEquals, invoiceFB._addedBlocks);
      }
    }
    _waitingNot = "";
    invoiceFB._addedBlocks.needEndBlock[invoiceFB._blockIndex] =
        invoiceFB._addedBlocks.retVal;
    return invoiceFB;
  }

  InvoiceFilterBuilder greaterThan(dynamic pValue) {
    param.expression = ">";
    invoiceFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, invoiceFB.parameters, param,
            SqlSyntax.GreaterThan, invoiceFB._addedBlocks)
        : setCriteria(pValue, invoiceFB.parameters, param,
            SqlSyntax.LessThanOrEquals, invoiceFB._addedBlocks);
    _waitingNot = "";
    invoiceFB._addedBlocks.needEndBlock[invoiceFB._blockIndex] =
        invoiceFB._addedBlocks.retVal;
    return invoiceFB;
  }

  InvoiceFilterBuilder lessThan(dynamic pValue) {
    param.expression = "<";
    invoiceFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, invoiceFB.parameters, param, SqlSyntax.LessThan,
            invoiceFB._addedBlocks)
        : setCriteria(pValue, invoiceFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, invoiceFB._addedBlocks);
    _waitingNot = "";
    invoiceFB._addedBlocks.needEndBlock[invoiceFB._blockIndex] =
        invoiceFB._addedBlocks.retVal;
    return invoiceFB;
  }

  InvoiceFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = ">=";
    invoiceFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, invoiceFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, invoiceFB._addedBlocks)
        : setCriteria(pValue, invoiceFB.parameters, param, SqlSyntax.LessThan,
            invoiceFB._addedBlocks);
    _waitingNot = "";
    invoiceFB._addedBlocks.needEndBlock[invoiceFB._blockIndex] =
        invoiceFB._addedBlocks.retVal;
    return invoiceFB;
  }

  InvoiceFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = "<=";
    invoiceFB._addedBlocks = _waitingNot == ""
        ? setCriteria(pValue, invoiceFB.parameters, param,
            SqlSyntax.LessThanOrEquals, invoiceFB._addedBlocks)
        : setCriteria(pValue, invoiceFB.parameters, param,
            SqlSyntax.GreaterThan, invoiceFB._addedBlocks);
    _waitingNot = "";
    invoiceFB._addedBlocks.needEndBlock[invoiceFB._blockIndex] =
        invoiceFB._addedBlocks.retVal;
    return invoiceFB;
  }

  InvoiceFilterBuilder inValues(var pValue) {
    invoiceFB._addedBlocks = setCriteria(
        pValue,
        invoiceFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.NOT_KEYWORD, _waitingNot),
        invoiceFB._addedBlocks);
    _waitingNot = "";
    invoiceFB._addedBlocks.needEndBlock[invoiceFB._blockIndex] =
        invoiceFB._addedBlocks.retVal;
    return invoiceFB;
  }
}
// endregion InvoiceField

// region InvoiceFilterBuilder
class InvoiceFilterBuilder extends SearchCriteria {
  InvoiceFilterBuilder(Invoice obj) {
    whereString = "";
    qparams = QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = AddedBlocks(List<bool>(), List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Invoice _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  InvoiceFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = " AND ";
    }
    return this;
  }

  InvoiceFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = " OR ";
    }
    return this;
  }

  InvoiceFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  InvoiceFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != "") {
      final DbParameter param = DbParameter();
      _addedBlocks = setCriteria(
          0, parameters, param, "(" + whereCriteria + ")", _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  InvoiceFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  InvoiceFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  InvoiceFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += " ) ";
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  InvoiceFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != "") orderByList.add(" $s ");
        }
      }
    }
    return this;
  }

  InvoiceFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add("$argFields desc ");
      } else {
        for (String s in argFields) {
          if (s != null && s != "") orderByList.add(" $s desc ");
        }
      }
    }
    return this;
  }

  InvoiceFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(" $argFields ");
      } else {
        for (String s in argFields) {
          if (s != null && s != "") groupByList.add(" $s ");
        }
      }
    }
    return this;
  }

  InvoiceField setField(InvoiceField field, String colName, DbType dbtype) {
    field = InvoiceField(this);
    field.param = DbParameter(
        dbType: dbtype,
        columnName: colName,
        wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
    return field;
  }

  InvoiceField _id;
  InvoiceField get id {
    _id = setField(_id, "id", DbType.integer);
    return _id;
  }

  InvoiceField _description;
  InvoiceField get description {
    _description = setField(_description, "description", DbType.text);
    return _description;
  }

  InvoiceField _path;
  InvoiceField get path {
    _path = setField(_path, "path", DbType.text);
    return _path;
  }

  InvoiceField _status;
  InvoiceField get status {
    _status = setField(_status, "status", DbType.text);
    return _status;
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams.limit = _pagesize;
      qparams.offset = (_page - 1) * _pagesize;
    } else {
      qparams.limit = _pagesize;
      qparams.offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll("[", "")
              .replaceAll("]", "")
              .toString();
          whereString += param.whereString
              .replaceAll("{field}", param.columnName)
              .replaceAll("?", param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll("{field}", param.columnName);
        }
        switch (param.dbType) {
          case DbType.bool:
            if (param.value != null) param.value = param.value == true ? 1 : 0;
            break;
          default:
        }

        if (param.value != null) whereArguments.add(param.value);
        if (param.value2 != null) whereArguments.add(param.value2);
      } else {
        whereString += param.whereString;
      }
    }
    if (Invoice._softDeleteActivated) {
      if (whereString != "") {
        whereString = (!_getIsDeleted ? "ifnull(isDeleted,0)=0 AND" : "") +
            " ($whereString)";
      } else if (!_getIsDeleted) {
        whereString = "ifnull(isDeleted,0)=0";
      }
    }

    if (whereString != "") {
      qparams.whereString = whereString;
    }
    qparams.whereArguments = whereArguments;
    qparams.groupBy = groupByList.join(',');
    qparams.orderBy = orderByList.join(',');
  }

  /// <summary>
  /// Deletes List<Invoice> batch by query
  /// </summary>
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted</returns>
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (Invoice._softDeleteActivated && !hardDelete) {
      r = await _obj._mnInvoice.updateBatch(qparams, {"isDeleted": 1});
    } else {
      r = await _obj._mnInvoice.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    return _obj._mnInvoice.updateBatch(qparams, values);
  }

  /// This method always returns InvoiceObj if exist, otherwise returns null
  /// <returns>List<Invoice></returns>
  Future<Invoice> toSingle([VoidCallback invoice(Invoice o)]) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnInvoice.toList(qparams);
    final data = await objFuture;
    Invoice retVal;
    if (data.isNotEmpty) {
      retVal = Invoice.fromMap(data[0] as Map<String, dynamic>);
    } else {
      retVal = null;
    }
    if (invoice != null) {
      invoice(retVal);
    }
    return retVal;
  }

  /// This method always returns int.
  /// <returns>int</returns>
  Future<int> toCount([VoidCallback invoiceCount(int c)]) async {
    _buildParameters();
    qparams.selectColumns = ["COUNT(1) AS CNT"];
    final invoicesFuture = await _obj._mnInvoice.toList(qparams);
    final int count = invoicesFuture[0]["CNT"] as int;
    if (invoiceCount != null) {
      invoiceCount(count);
    }
    return count;
  }

  /// This method always returns List<Invoice>.
  /// <returns>List<Invoice></returns>
  Future<List<Invoice>> toList(
      [VoidCallback invoiceList(List<Invoice> o)]) async {
    _buildParameters();
    final invoicesFuture = _obj._mnInvoice.toList(qparams);
    final List<Invoice> invoicesData = List<Invoice>();
    final data = await invoicesFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      invoicesData.add(Invoice.fromMap(data[i] as Map<String, dynamic>));
    }
    if (invoiceList != null) invoiceList(invoicesData);
    return invoicesData;
  }

  /// Returns List<DropdownMenuItem<Invoice>>
  Future<List<DropdownMenuItem<Invoice>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<Invoice>> o)]) async {
    _buildParameters();
    final invoicesFuture = _obj._mnInvoice.toList(qparams);

    final data = await invoicesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Invoice>> items = List();
    items.add(DropdownMenuItem(
      value: Invoice(),
      child: Text("Select Invoice"),
    ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Invoice.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<int>> o)]) async {
    _buildParameters();
    qparams.selectColumns = ["id", displayTextColumn];
    final invoicesFuture = _obj._mnInvoice.toList(qparams);

    final data = await invoicesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = List();
    items.add(DropdownMenuItem(
      value: 0,
      child: Text("Select Invoice"),
    ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]["id"] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int></returns>
  Future<List<int>> toListPrimaryKey(
      [VoidCallback idList(List<int> o), bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = List<int>();
    qparams.selectColumns = ["id"];
    final idFuture = await _obj._mnInvoice.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]["id"] as int);
    }
    if (idList != null) {
      idList(idData);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for "groupBy" with min,max,avg..
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback listObject(List<dynamic> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnInvoice.toList(qparams);

    final List<dynamic> objectsData = List<dynamic>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Invoice.select(columnsToSelect: ["columnName"]).toListString()
  Future<List<String>> toListString(
      [VoidCallback listString(List<String> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnInvoice.toList(qparams);

    final List<String> objectsData = List<String>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion InvoiceFilterBuilder

// region InvoiceFields
class InvoiceFields {
  static TableField _fId;
  static TableField get id {
    _fId = SqlSyntax.setField(_fId, "id", DbType.integer);
    return _fId;
  }

  static TableField _fDescription;
  static TableField get description {
    _fDescription =
        SqlSyntax.setField(_fDescription, "description", DbType.text);
    return _fDescription;
  }

  static TableField _fPath;
  static TableField get path {
    _fPath = SqlSyntax.setField(_fPath, "path", DbType.text);
    return _fPath;
  }

  static TableField _fStatus;
  static TableField get status {
    _fStatus = SqlSyntax.setField(_fStatus, "status", DbType.text);
    return _fStatus;
  }
}
// endregion InvoiceFields

//region InvoiceManager
class InvoiceManager extends SqfEntityProvider {
  InvoiceManager() : super(MyDbModel(), tableName: _tableName, colId: _colId);
  static String _tableName = "invoice";
  static String _colId = "id";
}

//endregion InvoiceManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback nextval(int o)]) async {
    final val = await SequenceManager().sequence(SequenceIdentity(), true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback currentval(int o)]) async {
    final val = await SequenceManager().sequence(SequenceIdentity(), false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback currentval(int o)]) async {
    final val = await SequenceManager()
        .sequence(SequenceIdentity(), false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence
class SequenceManager extends SqfEntityProvider {
  SequenceManager() : super(MyDbModel());
}
